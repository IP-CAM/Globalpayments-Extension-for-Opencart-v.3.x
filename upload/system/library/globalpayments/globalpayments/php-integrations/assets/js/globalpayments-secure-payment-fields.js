// Configure accountwindow.GlobalPayments.configure({    accessToken: '',    env: 'sandbox',    apiVersion: '2021-03-22',});const paymentForm = document.getElementById("payment-form");// Create Formconst cardForm = GlobalPayments.creditCard.form("#credit-card", { style: "gp-default" });cardForm.on("token-success", (resp) => {    // Add payment token to form as a hidden input    const token = document.createElement("input");    token.type = "hidden";    token.id = "payment-token";    token.name = "payment_token";    token.value = resp.paymentReference;    // Submit data to the integration's backend for processing    paymentForm.appendChild(token);    const start3DSButton = document.getElementById("start");    start3DSButton.click();});cardForm.on("token-error", (resp) => {    // Show error to the consumer});cardForm.on("error", (resp) => {    // Show error to the consumer});const {    checkVersion,    initiateAuthentication,    ChallengeWindowSize,} = GlobalPayments.ThreeDSecure;// Add submit click event handlerdocument.addEventListener('DOMContentLoaded', () => {    const checkVersionButton = document.getElementById('start');    if (!checkVersionButton) {        return;    }    checkVersionButton.addEventListener('click', start3DS);});// Handle 3DS 2.0 workflowconst start3DS = async (e) => {    e.preventDefault();    try {        const versionCheckData = await checkVersion('/examples/ThreeDSecure/CheckEnrollment/', {            card: {                reference: document.getElementById('payment-token').value,            },            order: {                amount: 10,                currency: "EUR",            }        });        if ( versionCheckData.status === "NOT_ENROLLED" && versionCheckData.liabilityShift !== "YES") {            // TODO: avoid authorization and ask the customer to try another card instead            return false;        }        if ( versionCheckData.status === "NOT_ENROLLED" && versionCheckData.liabilityShift === "YES") {            // TODO: proceed with authorization            return true;        }        const authenticationData = await initiateAuthentication('/examples/ThreeDSecure/InitiateAuthentication/', {            card: {                reference: document.getElementById('payment-token').value,            },            order: {                amount: 10,                currency: "EUR",                // shipping address                // billing addres            },            payer: {                email: "john.smith@example.com",            },            versionCheckData: versionCheckData,            challengeWindow: {                windowSize: ChallengeWindowSize.Windowed600x400,                displayMode: 'lightbox',            }        });        // You have a liability shift and fraud protection        if (authenticationData.liabilityShift === "YES" && (authenticationData.result === "SUCCESS_AUTHENTICATED" || authenticationData.result === "SUCCESS_ATTEMPT_MADE")) {            // TODO: proceed with authorization        }        // Add serverTransactionId to form as a hidden input        const serverTransactionId = document.createElement("input");        serverTransactionId.type = "hidden";        serverTransactionId.name = "serverTransactionId";        serverTransactionId.value = authenticationData.serverTransactionId || authenticationData.challenge.response.data.threeDSServerTransID || versionCheckData.serverTransactionId        // Submit data to the integration's backend for processing        paymentForm.appendChild(serverTransactionId);        paymentForm.submit();        return true;    } catch (e) {        console.log(e);        console.error('An error occurred', e.reasons);        return false;    }    return false;};