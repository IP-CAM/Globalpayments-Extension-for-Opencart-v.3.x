<form id="globalpayments-payment-form" name="checkout" action="{{ action }}" method="POST" class="form-horizontal">
  <div id="globalpayments-alert" class="alert alert-danger" style="display:none;"></div>
  <div id="globalpayments-loading" style="text-align: center"><i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i> <span>{{ text_loading }}</span></div>
  <div class="globalpayments" style="width: 300px; margin: auto">
    <fieldset id="{{ paymentMethod.paymentMethodId }}-digitalwallet">
      <!-- Target for digital wallet -->
      <div id="{{ paymentMethod.paymentMethodId }}-digitalwallet-submit'"></div>
    </fieldset>
  </div>
    <div class="buttons clearfix">
      <div class="pull-right">
        <input type="button" value="{{ button_confirm }}" id="button-confirm" data-loading-text="{{ text_loading }}" class="btn btn-primary" />
      </div>
    </div>
</form>
<style>
  .globalpayments-validation-error, .globalpayments-sandbox-warning {
    list-style:none outside;
  }
</style>
<script type="text/javascript">
	$('#globalpayments-loading').hide();

	var globalpayments_googlepay_params = {{ globalpayments_googlepay_params }};
	var globalpayments_order = {{ globalpayments_order }};
	$.getScript(
		'https://pay.google.com/gp/p/js/pay.js', function () {
			$.getScript('https://malsup.github.io/jquery.blockUI.js');

			/**
			 * Frontend code for Global Payments
			 *
			 * @param {object} options
			 */
			function GlobalPaymentsGatewayProvider (options, order) {
				/**
				 * Payment method id
				 *
				 * @type {string}
				 */
				this.id = options.id;

				/**
				 * The current order
				 *
				 * @type {object}
				 */
				this.order = order;

				/**
				 * Payment method options
				 *
				 * @type {object}
				 */
				this.paymentMethodOptions = options.paymentMethodOptions;

				/**
				 *
				 * @type {null}
				 */
				this.paymentsClient = null;

				this.attachEventHandlers();
			};

			GlobalPaymentsGatewayProvider.prototype = {
				/**
				 * Add important event handlers for controlling the payment experience during checkout
				 *
				 * @returns
				 */
				attachEventHandlers: function () {
					var self = this;

					// General
					$(document).ready(function () {
						self.initialize();
					});
				},

				initialize: function () {
					var self = this;

					self.setGooglePaymentsClient();

					self.paymentsClient.isReadyToPay(
						self.getGoogleIsReadyToPayRequest()
					)
						.then(function (response) {
							if (response.result) {
								self.addGooglePayButton();
							}
						})
						.catch(function (err) {
							console.error(err);
						});
				},

				getBaseRequest: function () {
					return {
						apiVersion: 2,
						apiVersionMinor: 0
					};
				},

				/**
				 * Google Merchant ID
				 */
				getGoogleMerchantId: function () {
					return this.paymentMethodOptions.googleMerchantId;
				},

				/**
				 * Google Merchant Display Name
				 */
				getGoogleMerchantName: function () {
					return this.paymentMethodOptions.googleMerchantName;
				},

				/**
				 * Environment
				 */
				getEnvironment: function () {
					return this.paymentMethodOptions.env;
				},

				/**
				 * BTN Color
				 */
				getBtnColor: function () {
					return this.paymentMethodOptions.btnColor;
				},

				getAllowedCardNetworks: function () {
					return this.paymentMethodOptions.ccTypes;
				},

				getAllowedCardAuthMethods: function () {
					return ['PAN_ONLY', 'CRYPTOGRAM_3DS'];
				},

				getTokenizationSpecification: function () {
					return {
						type: 'PAYMENT_GATEWAY',
						parameters: {
							'gateway': 'globalpayments',
							'gatewayMerchantId': this.paymentMethodOptions.globalPaymentsMerchantId
						}
					}
				},

				getBaseCardPaymentMethod: function () {
					return {
						type: 'CARD',
						parameters: {
							allowedAuthMethods: this.getAllowedCardAuthMethods(),
							allowedCardNetworks: this.getAllowedCardNetworks(),
							billingAddressRequired: true
						}
					}
				},

				getCardPaymentMethod: function () {
					return Object.assign({}, this.getBaseCardPaymentMethod(), {tokenizationSpecification: this.getTokenizationSpecification()});
				},

				getGoogleIsReadyToPayRequest: function () {
					return Object.assign({}, this.getBaseRequest(), {allowedPaymentMethods: [this.getBaseCardPaymentMethod()]});
				},

				getGooglePaymentDataRequest: function () {
					var paymentDataRequest = Object.assign({}, this.getBaseRequest());
					paymentDataRequest.allowedPaymentMethods = [this.getCardPaymentMethod()];
					paymentDataRequest.transactionInfo = this.getGoogleTransactionInfo();
					paymentDataRequest.merchantInfo = {
						merchantId: this.getGoogleMerchantId(),
						merchantName: this.getGoogleMerchantName()
					}

					return paymentDataRequest;
				},

				getGoogleTransactionInfo: function () {
					return {
						totalPriceStatus: 'FINAL',
						totalPrice: this.order.amount.toString(),
						currencyCode: this.order.currency
					};
				},

				/**
				 * Init google pay client
				 */
				setGooglePaymentsClient: function () {
					var self = this;
					if (null === this.paymentsClient) {
						this.paymentsClient = new google.payments.api.PaymentsClient({
							environment: self.getEnvironment()
						});
					}
				},

				/**
				 * Add the google pay button to the DOM
				 */
				addGooglePayButton: function () {
					this.createSubmitButtonTarget();

					var self = this;
					var button = this.paymentsClient.createButton({
						buttonColor: self.getBtnColor(),
						onClick: function () {
							self.onGooglePaymentButtonClicked();
						}
					});

					$(this.getSubmitButtonTargetSelector()).append(button);
				},

				onGooglePaymentButtonClicked: function () {
					var self = this
					var paymentDataRequest = this.getGooglePaymentDataRequest();
					paymentDataRequest.transactionInfo = this.getGoogleTransactionInfo();

					this.paymentsClient.loadPaymentData(paymentDataRequest)
						.then(function (paymentData) {
							self.createInputElement(
								'dwToken',
								JSON.stringify(JSON.parse(paymentData.paymentMethodData.tokenizationData.token))
							);

							self.createInputElement(
								'cardHolderName',
								paymentData.paymentMethodData.info.billingAddress.name
							);

							return self.placeOrder();
						})
						.catch(function (err) {
							console.error(err);
					});
				},

				/**
				 * Swaps the default Platform 'Confirm Order' button for our
				 * digital wallet buttons when one of our gateways is selected.
				 *
				 * @returns
				 */
				toggleSubmitButtons: function () {
					// our gateway was selected
					$(this.getSubmitButtonTargetSelector()).show();
					$(this.getPlaceOrderButtonSelector()).addClass('globalpayments-hidden').hide();
				},

				/**
				 * Gets the current checkout form
				 *
				 * @returns {Element}
				 */
				getForm: function () {
					var checkoutForms = [
						// Checkout
						'form#globalpayments-payment-form',
					];
					var forms = document.querySelectorAll(checkoutForms.join(','));

					return forms.item(0);
				},

				/**
				 * Places/submits the order to Platform
				 *
				 * @returns
				 */
				placeOrder: function () {
				$(this.getForm()).submit();
				},

				createInputElement: function (name, value) {
					var inputElement = (document.getElementById(this.id + '-' + name));

					if (!inputElement) {
						inputElement = document.createElement('input');
						inputElement.id = this.id + '-' + name;
						inputElement.name = this.id + '[' + name + ']';
						inputElement.type = 'hidden';
						this.getForm().appendChild(inputElement);
					}

					inputElement.value = value;
				},

				/**
				 * Creates the parent for the submit button
				 *
				 * @returns
				 */
				createSubmitButtonTarget: function () {
					var el = document.createElement('div')
					el.id = this.getSubmitButtonTargetSelector().replace('#', '');
					el.className = 'globalpayments ' + this.id + ' digitalwallet-submit';
					$(this.getPlaceOrderButtonSelector()).after(el);
					// match the visibility of our payment form
					this.toggleSubmitButtons();
				},

				/**
				 * Convenience function to get CSS selector for the built-in 'Place Order' button
				 *
				 * @returns {string}
				 */
				getPlaceOrderButtonSelector: function () {
					return '#button-confirm';
				},

				/**
				 * Convenience function to get CSS selector for the custom 'Place Order' button's parent element
				 *
				 * @param {string} id
				 * @returns {string}
				 */
				getSubmitButtonTargetSelector: function () {
					return '#' + this.id + '-digitalwallet-submit';
				},
			};

			new GlobalPaymentsGatewayProvider(globalpayments_googlepay_params, globalpayments_order);
		}
	);
</script>
